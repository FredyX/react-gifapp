{"version":3,"sources":["components/AddCategory.js","components/GrifGridItem.js","helpers/getGift.js","components/GifGrid.js","hooks/useFetchGif.js","components/GiftExpert.js","index.js"],"names":["AddCategory","setCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categoria","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGif","GiftExpert","ReactDOM","render","document","getElementById"],"mappings":"6LAwBeA,EAtBK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EAECC,mBAAS,IAFV,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAWpC,OACI,sBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,GAAa,SAAAO,GAAS,OAAIL,GAAJ,mBAAmBK,QAIzC,SACI,uBACIC,KAAK,OACLC,MAAOP,EACPQ,SAbQ,SAACL,GACjBF,EAAcE,EAAEM,OAAOF,a,QCMhBG,EAVK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAE7B,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOZ,GAAP,uBAAAa,EAAA,6DACbL,EADa,iDACmCM,UAAUd,GAD7C,+DAEIe,MAAMP,GAFV,cAEbQ,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,QATvB,kBAYZW,GAZY,4CAAH,sDCiCLK,EA5BC,SAAC,GAAiB,IAAhBxB,EAAe,EAAfA,UAAe,ECHN,SAACA,GAAe,IAAD,EACZN,mBAAS,CAC/BwB,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OAPAC,qBAAU,WACNhB,EAAQZ,GACH6B,MAAK,SAACP,GACHK,EAAS,CAACT,KAAMI,EAAQG,SAAS,SAE1C,CAACzB,IAEG0B,EDRyBI,CAAY9B,GAA/BsB,EAFgB,EAEtBJ,KAAcO,EAFQ,EAERA,QAQrB,OACI,qCACI,6BAAKzB,IACJyB,GAAW,yCACZ,qBAAKhB,UAAU,YAAf,SAEQa,EAAOF,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIf,aEQtByB,EA7BI,WAAO,IAAD,EAEYrC,mBAAS,CAAC,cAFtB,mBAEdM,EAFc,KAEJP,EAFI,KAUrB,OACI,qCACI,iDACA,cAAC,EAAD,CAAaA,aAAcA,IAC3B,uBACA,6BAEQO,EAAUoB,KAAK,SAAApB,GAAS,OACvB,cAAC,EAAD,CACGA,UAAWA,GACNA,Y,MClB7BgC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.49b84b49.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst AddCategory = ({setCategoria}) => {\n\n    const [inputValue, setInputValue] =  useState('');\n    const handleInput = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategoria(categoria =>[inputValue, ...categoria]);\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInput}\n            />\n        </form>\n    );\n}\n\nexport default AddCategory;","import React from 'react';\n\nconst GifGridItem = ({id, title, url}) => {\n\n    return(\n        <div className=\"card\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n}\n\nexport default GifGridItem;","\nexport const getGifs = async (categoria) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=cZ50MZfacsxYziV0CWlUCBnrrPJbtTkl`;\n    const response = await fetch(url);\n    const {data} = await response.json();\n    \n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","//import React, { useState, useEffect} from 'react';\nimport GifGridItem from './GrifGridItem';\n//import { getGifs } from '../helpers/getGift';\nimport React from 'react';\nimport { useFetchGif } from '../hooks/useFetchGif';\n\nconst GifGrid = ({categoria}) => {\n\n    const {data: images, loading} = useFetchGif(categoria);\n    //const [image, setImage] = useState([]);\n    \n    //useEffect(() => {\n      //  getGifs(categoria)\n        //    .then(setImage)\n    //}, [categoria]);\n    //Si la categoria cambia se necesita volver a ejecutar este efecto    \n    return(\n        <>\n            <h3>{categoria}</h3>\n            {loading && <p>Cargando</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>            \n        </>\n    );\n}\n\nexport default GifGrid;","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGift\";\n\nexport const useFetchGif = (categoria) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() =>{\n        getGifs(categoria)\n            .then((images) => {\n                setState({data: images, loading: false});\n            });\n    }, [categoria]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\nconst GiftExpert = () => {\n\n    const [categoria,setCategoria] = useState(['One Punch']);\n/*\n    const handleAdd = (e) => {\n        setCategoria([...categoria, 'HunterXhunter']);\n        //el parametro es el valor del estado anterior del hooke\n        //setCategoria( cats => [...cats, 'HunterXHunter']);\n    }\n*/\n    return(\n        <>\n            <h2>Gift Expert App</h2>\n            <AddCategory setCategoria={setCategoria} />\n            <hr />\n            <ol>\n                {\n                    categoria.map( categoria => \n                    (<GifGrid \n                        categoria={categoria}\n                        key={categoria}\n                      />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GiftExpert;","import React from 'react';\nimport  ReactDOM  from 'react-dom';\nimport GiftExpert from './components/GiftExpert';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpert />,\n    document.getElementById('root')\n);"],"sourceRoot":""}